/* Generated By:JavaCC: Do not edit this line. Stil.java */
package org.kyupi.data.parser;

import java.util.*;
import java.io.*;

import org.apache.log4j.Logger;

@SuppressWarnings("all")
public class Stil implements StilConstants {

        protected static Logger log = Logger.getLogger(Stil.class);

        private static String getLocation(String sf_, Token token_) {
            if (token_ != null)
                  return sf_ + ":" + token_.beginLine + ":" + token_.beginColumn;
                return sf_;
        }

        public static Stil load (InputStream is, File f) throws IOException {
            String sf_ = f.getPath();
                Reader reader = new InputStreamReader(is);
                Stil parser = new Stil(reader);
        try {
                        parser.stil_file ();
                } catch (ParseException e3) {
                    e3.printStackTrace();
                        throw new IOException("Parse error at " + getLocation(sf_,e3.currentToken) + ": " + e3.getMessage());
                } catch (TokenMgrError e4) {
                        throw new IOException("Token error in " + sf_.toString() + ": " + e4.getMessage());
                }
                return parser;
        }

        private String unquote(String s)
        {
          return s.substring(1,s.length()-1);
        }

        public ArrayList<String> primary_inputs;
        public ArrayList<String> primary_outputs;
        public ArrayList<String> chain_names;
        public ArrayList<ArrayList<String>> chain_cells;

        public ArrayList<Operation> ops;

        public String clock;

        public class Operation {
          public String pi,po,scanin,scanout;
        }

  final public void stil_file() throws ParseException {
    jj_consume_token(STIL);
    jj_consume_token(number_float);
    ignored_block();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case HEADER:
        jj_consume_token(HEADER);
        ignored_block();
        break;
      case SIGNALS:
        jj_consume_token(SIGNALS);
        ignored_block();
        break;
      case SIGNALGROUPS:
        jj_consume_token(SIGNALGROUPS);
        signal_groups();
        break;
      case TIMING:
        jj_consume_token(TIMING);
        ignored_block();
        break;
      case SCANSTRUCTURES:
        jj_consume_token(SCANSTRUCTURES);
        scan_structures();
        break;
      case PATTERNBURST:
        jj_consume_token(PATTERNBURST);
        jj_consume_token(string);
        ignored_block();
        break;
      case PATTERNEXEC:
        jj_consume_token(PATTERNEXEC);
        ignored_block();
        break;
      case PROCEDURES:
        jj_consume_token(PROCEDURES);
        ignored_block();
        break;
      case MACRODEFS:
        jj_consume_token(MACRODEFS);
        ignored_block();
        break;
      case PATTERN:
        jj_consume_token(PATTERN);
        jj_consume_token(string);
        pattern();
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case HEADER:
      case SIGNALS:
      case SIGNALGROUPS:
      case TIMING:
      case SCANSTRUCTURES:
      case PATTERNBURST:
      case PATTERNEXEC:
      case PROCEDURES:
      case MACRODEFS:
      case PATTERN:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
    }
    jj_consume_token(0);
  }

  final public void signal_groups() throws ParseException {
  Token t;
  ArrayList<String> arr;
    jj_consume_token(bopen);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case string:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      t = jj_consume_token(string);
      jj_consume_token(equals);
      jj_consume_token(quote);
      arr = string_plus_array();
      jj_consume_token(quote);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case semicolon:
        jj_consume_token(semicolon);
        break;
      case bopen:
        ignored_block();
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      String s = unquote(t.image);
      if (s.equals("_pi"))
        primary_inputs = arr;
      if (s.equals("_po"))
        primary_outputs = arr;
    }
    jj_consume_token(bclose);
  }

  final public void scan_structures() throws ParseException {
  Token t;
  ArrayList<String> cells;
    jj_consume_token(bopen);
    chain_names = new ArrayList<String>();
    chain_cells = new ArrayList<ArrayList<String>>();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SCANCHAIN:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
      jj_consume_token(SCANCHAIN);
      t = jj_consume_token(string);
    chain_names.add(unquote(t.image));
      cells = scan_chain();
    chain_cells.add(cells);
    }
    jj_consume_token(bclose);
  }

  final public ArrayList<String> scan_chain() throws ParseException {
  ArrayList<String> cells = null;
  Token t;
    jj_consume_token(bopen);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SCANLENGTH:
      case SCANIN:
      case SCANOUT:
      case SCANINVERSION:
      case SCANCELLS:
      case SCANMASTERCLOCK:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SCANLENGTH:
        jj_consume_token(SCANLENGTH);
        jj_consume_token(number_integer);
        jj_consume_token(semicolon);
        break;
      case SCANIN:
        jj_consume_token(SCANIN);
        jj_consume_token(string);
        jj_consume_token(semicolon);
        break;
      case SCANOUT:
        jj_consume_token(SCANOUT);
        jj_consume_token(string);
        jj_consume_token(semicolon);
        break;
      case SCANINVERSION:
        jj_consume_token(SCANINVERSION);
        jj_consume_token(number_integer);
        jj_consume_token(semicolon);
        break;
      case SCANCELLS:
        jj_consume_token(SCANCELLS);
        cells = string_array();
        jj_consume_token(semicolon);
        break;
      case SCANMASTERCLOCK:
        jj_consume_token(SCANMASTERCLOCK);
        t = jj_consume_token(string);
        jj_consume_token(semicolon);
          clock = unquote(t.image);
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(bclose);
    {if (true) return cells;}
    throw new Error("Missing return statement in function");
  }

  final public void pattern() throws ParseException {
  Operation op;
    ops = new ArrayList<Operation>();
    jj_consume_token(bopen);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CALL:
      case identifier:
      case semicolon:
      case bopen:
      case nonbrace_character:
      case string:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case identifier:
        jj_consume_token(identifier);
        break;
      case string:
        jj_consume_token(string);
        break;
      case semicolon:
        jj_consume_token(semicolon);
        break;
      case nonbrace_character:
        jj_consume_token(nonbrace_character);
        break;
      case bopen:
        ignored_block();
        break;
      case CALL:
        jj_consume_token(CALL);
        jj_consume_token(string);
        op = pattern_record();
        ops.add(op);
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(bclose);
  }

  final public Operation pattern_record() throws ParseException {
  Operation op = new Operation();
  String pat;
  String id;
  Token t;
    jj_consume_token(bopen);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case string:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_6;
      }
      t = jj_consume_token(string);
      jj_consume_token(equals);
      pat = read_pattern();
      jj_consume_token(semicolon);
      id=unquote(t.image);
      if (id.equals("_pi"))
        op.pi = pat;
      if (id.equals("_po"))
        op.po = pat;
      if (id.equals("Scan_In"))
        op.scanin = pat;
      if (id.equals("Scan_Out"))
        op.scanout = pat;
    }
    jj_consume_token(bclose);
    {if (true) return op;}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList<String> string_plus_array() throws ParseException {
  Token t;
  ArrayList<String> arr = new ArrayList<String>();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case string:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_7;
      }
      t = jj_consume_token(string);
    arr.add(unquote(t.image));
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case plus:
          ;
          break;
        default:
          jj_la1[11] = jj_gen;
          break label_8;
        }
        jj_consume_token(plus);
        t = jj_consume_token(string);
    arr.add(unquote(t.image));
      }
    }
    {if (true) return arr;}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList<String> string_array() throws ParseException {
  Token t;
  ArrayList<String> arr = new ArrayList<String>();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case string:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_9;
      }
      t = jj_consume_token(string);
    arr.add(unquote(t.image));
    }
    {if (true) return arr;}
    throw new Error("Missing return statement in function");
  }

  final public void ignored_block() throws ParseException {
    jj_consume_token(bopen);
    skip_to_matching_brace();
    jj_consume_token(bclose);
  }

  void skip_to_matching_brace() throws ParseException {
        Token tok;
        int nesting = 1;
        while (true) {
                tok = getToken(1);
                if (tok.kind == bopen) nesting++;
                if (tok.kind == bclose) {
                        nesting--;
                        if (nesting == 0) break;
                }
                tok = getNextToken();
        }
  }

  String read_pattern() throws ParseException {
        StringBuffer buf = new StringBuffer();
        Token tok;
        while (true) {
                tok = getToken(1);
                if (tok.kind == semicolon) break;
                buf.append(tok.image);
                tok = getNextToken();
        }
        return buf.toString();
  }

  /** Generated Token Manager. */
  public StilTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[13];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1ff80,0x1ff80,0x0,0x0,0x20000,0xfc0000,0xfc0000,0x81000000,0x81000000,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x80,0x18,0x0,0x0,0x0,0xd8,0xd8,0x80,0x80,0x4,0x80,};
   }

  /** Constructor with InputStream. */
  public Stil(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Stil(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new StilTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Stil(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new StilTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Stil(StilTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(StilTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[40];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 13; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 40; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
